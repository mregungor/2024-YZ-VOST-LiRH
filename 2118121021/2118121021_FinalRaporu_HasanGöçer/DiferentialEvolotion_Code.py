# -*- coding: utf-8 -*-
"""Grafik_and_oklugösterim.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W4driWt8LD24mqFx0e1AkK0FQ29fZqwL
"""

import numpy as np
import matplotlib.pyplot as plt
import imageio
from PIL import Image
#
gif_frames = []
# evaluate fonksiyonu :  x=
def evaluate(x, ncons):
    penalty = np.zeros(ncons)
    value = np.zeros(ncons)
    np.full_like(penalty, 1000)

    # objective function
    result = (x[0]**2 + x[1] - 11)**2 + (x[0] + x[1]**2 - 7)**2

    # Şuan ki durum
    temp = (x[0]-5)**2 + x[1]**2 - 26
    value[0] = max(temp, 0)

    # İkinci durum
    temp = 4*x[0] + x[1] - 20
    value[1] = max(temp, 0)

    for i in range(ncons):
        result = result + value[i]*penalty[i]
    return result

def de(bounds, ncons, mut=0.8, crossp=0.7, popsize=20, max_gen=50):
    dimensions = len(bounds)
    min_b = np.amin(bounds)
    max_b = np.amax(bounds)
    diff = np.fabs(max_b - min_b)

    #Başlangıç ​​popülasyonu
    norm_cur_gen = np.random.rand(popsize, dimensions)
    nxt_gen = np.zeros_like(norm_cur_gen)
    cur_gen = min_b + norm_cur_gen * diff

    fitness = np.asarray([evaluate(ind, ncons) for ind in cur_gen])
    best_idx = np.argmin(fitness)
    best = cur_gen[best_idx]

    # For plotting
    iteration_means = []

    for i in range(max_gen):
        for j in range(popsize):
            idxs = [idx for idx in range(popsize) if idx != j]

            # Selection of three random vector
            a, b, c = norm_cur_gen[np.random.choice(idxs, 3, replace=False)]

            # Mutasyon
            mutant = np.clip(a + mut * (b - c), 0, 1)
            cross_points = np.random.rand(dimensions) < crossp
            if not np.any(cross_points):
                cross_points[np.random.randint(0, dimensions)] = True

            # Caprazlama
            norm_trial = np.where(cross_points, mutant, norm_cur_gen[j])

            # Deneme vektörünün normalleştirilmesi
            trial = min_b + norm_trial * diff
            f = evaluate(trial, ncons)

            # Uygun değeri bir sonraki nesle aktarma
            if f < fitness[j]:
                fitness[j] = f
                nxt_gen[j] = trial
            else:
                nxt_gen[j] = cur_gen[j]

        # Veriyi x ve y koordinatlarına ayırma
        # Birinci veri kümesi (mavi renk)
        data1 = cur_gen

        # İkinci veri kümesi (sarı renk)
        data2 = nxt_gen

        # Birinci veri kümesinden x ve y koordinatlarını ayırma
        x1 = data1[:, 0]
        y1 = data1[:, 1]

        # İkinci veri kümesinden x ve y koordinatlarını ayırma
        x2 = data2[:, 0]
        y2 = data2[:, 1]

        # Scatter plot oluşturma
        plt.figure(figsize=(8, 6))

        # Birinci veri kümesini mavi renkte gösterme
        plt.scatter(x1, y1, color='blue', label='Data 1', alpha=0.7)

        # İkinci veri kümesini sarı renkte gösterme
        plt.scatter(x2, y2, color='yellow', label='Data 2', alpha=0.7)

        # Grafik başlığı ve eksik etiketleri ekleme
        plt.title('Iteration ' + str(i))
        plt.xlabel('X Ekseni')
        plt.ylabel('Y Ekseni')
        plt.grid(True)

        # Eksen limitlerini sabitleme
        plt.xlim(bounds[0, 0], bounds[0, 1])
        plt.ylim(bounds[1, 0], bounds[1, 1])

        # Arrow annotation eklemek
        for k in range(popsize):
            plt.annotate('', xy=(x2[k], y2[k]), xytext=(x1[k], y1[k]),
                         arrowprops=dict(facecolor='red', shrink=0.05))

        # Grafik üzerindeki legend (açıklama) için etiketleri gösterme
        plt.legend()

        # Grafiği gösterme
        plt.savefig(f"iteration_{i}.png")  # Resmi kaydet
        plt.close()  # Grafiği kapat

        # Resmi GIF'e ekle
        image = Image.open(f"iteration_{i}.png")  # Resmi aç
        gif_frames.append(image)  # Resmi GIF'e ekle

        np.copyto(cur_gen, nxt_gen)

# Define bounds
bounds = np.array([[0, 10], [0, 10]])

# Run DE optimization
de(bounds, 2)

# GIF oluşturma
gif_frames[0].save(
    "abc_optimization.gif",
    save_all=True,
    append_images=gif_frames[1:],
    duration=500,
    loop=0
)