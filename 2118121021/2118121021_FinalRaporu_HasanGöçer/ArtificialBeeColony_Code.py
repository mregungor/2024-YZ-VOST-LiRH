# -*- coding: utf-8 -*-
"""grafikliABC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P46FdvQY0eCLkFxyW1el46pD8s8m3X6E
"""

# numpy ve matplotlib kütüphanelerini içe aktarın
import numpy as np
import matplotlib.pyplot as plt

# Hedef fonksiyon tanımı: x'in elemanlarının karelerinin toplamını hesaplar
def objektif_fonksiyon(x):
    return sum(x**2)

# Yapay Arı Kolonisi sınıfı tanımı
class YapayAriKolonisi:
    # Yapıcı metot: Yapay Arı Kolonisi örneğini başlatır
    def __init__(self, objektif_fonksiyon, n_ari, n_iterasyon, min_x, max_x):
        self.objektif_fonksiyon = objektif_fonksiyon  # Hedef fonksiyon
        self.n_ari = n_ari  # Arı sayısı
        self.n_iterasyon = n_iterasyon  # İterasyon sayısı
        self.min_x = min_x  # Minimum x değerleri
        self.max_x = max_x  # Maksimum x değerleri

        # Rastgele başlangıç konumları oluştur
        self.konumlar = np.random.uniform(min_x, max_x, (n_ari, len(min_x)))

        # Konumların değerlerini hesapla
        self.degerler = np.array([self.objektif_fonksiyon(konum) for konum in self.konumlar])

    # Optimizasyonu gerçekleştiren metot
    def optimize_et(self):
        konumlar_hist = [self.konumlar.copy()]  # Her iterasyonda konumların geçmişini saklamak için liste
        for iterasyon in range(self.n_iterasyon):
            # Her arının yeni konumunu hesapla
            yeni_konumlar = self.konumlar + np.random.uniform(-1, 1, self.konumlar.shape) * (self.konumlar - self.konumlar[np.random.randint(0, self.n_ari, self.n_ari)])

            # Yeni konumları sınırla
            yeni_konumlar = np.clip(yeni_konumlar, self.min_x, self.max_x)

            # Yeni konumların değerlerini hesapla
            yeni_degerler = np.array([self.objektif_fonksiyon(konum) for konum in yeni_konumlar])

            # İyileştirme durumlarını kontrol et ve güncelle
            iyilestirme_indeksleri = yeni_degerler < self.degerler
            self.konumlar[iyilestirme_indeksleri] = yeni_konumlar[iyilestirme_indeksleri]
            self.degerler[iyilestirme_indeksleri] = yeni_degerler[iyilestirme_indeksleri]

            # Geçmiş konumlarına yeni konumları ekle
            konumlar_hist.append(self.konumlar.copy())

        # En iyi konumu ve değeri belirle
        en_iyi_konum = self.konumlar[np.argmin(self.degerler)]
        en_iyi_deger = np.min(self.degerler)
        return en_iyi_konum, en_iyi_deger, konumlar_hist

# Parametreleri ayarla
n_ari = 50
n_iterasyon = 10
min_x = np.array([-5, -5])  # Minimum x değerleri
max_x = np.array([5, 5])    # Maksimum x değerleri

# Yapay Arı Kolonisi örneğini oluştur
aci = YapayAriKolonisi(objektif_fonksiyon, n_ari, n_iterasyon, min_x, max_x)

# Optimizasyonu gerçekleştir
en_iyi_konum, en_iyi_deger, konumlar_hist = aci.optimize_et()

# Her iterasyonda konumları göster
for iterasyon, konumlar in enumerate(konumlar_hist):
    plt.figure()
    plt.plot(konumlar[:,0], konumlar[:,1], 'b.')  # Tüm konumları mavi noktalarla göster
    plt.plot(en_iyi_konum[0], en_iyi_konum[1], 'ro')  # En iyi konumu kırmızı nokta ile göster
    plt.xlabel('x1')
    plt.ylabel('x2')
    plt.title(f'Iterasyon {iterasyon}')
    plt.grid(True)
    plt.show()