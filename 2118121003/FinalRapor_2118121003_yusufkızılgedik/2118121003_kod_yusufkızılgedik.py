# -*- coding: utf-8 -*-
"""Colaboratory'ye Hoş Geldiniz

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping
import matplotlib.pyplot as plt
import plotly.graph_objects as go

# Excel dosyasını okuyun
df = pd.read_excel('veri_seti.xlsx')

# Veriyi zaman serisi olarak işleyin
df['date_time'] = pd.to_datetime(df['date_time'])
df.set_index('date_time', inplace=True)

# Veriyi ölçeklendirin
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(df)

# Eğitim ve test veri setlerini ayırın
train_size = int(len(scaled_data) * 0.8)
train_data, test_data = scaled_data[:train_size], scaled_data[train_size:]

# Veriyi pencere yöntemiyle oluşturun (özellikler artırılmıştır)
def create_dataset(data, window_size):
    X, y = [], []
    for i in range(len(data) - window_size):
        X.append(data[i:i+window_size])
        y.append(data[i+window_size][0])  # Hedef, sıcaklık (ilk sütun)
    return np.array(X), np.array(y)

# Pencere boyutunu ayarlayın (güncellenmiş)
window_size = 5
X_train, y_train = create_dataset(train_data, window_size)
X_test, y_test = create_dataset(test_data, window_size)

# LSTM modelini oluşturun (güncellenmiş giriş şekli)
model = Sequential([
    LSTM(100, activation='relu', return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])),
    Dropout(0.2),
    LSTM(100, activation='relu', return_sequences=True),
    Dropout(0.2),
    LSTM(100, activation='relu', return_sequences=True),
    Dropout(0.2),
    LSTM(100, activation='relu'),
    Dropout(0.2),
    Dense(1)  # Çıktı katmanı (sıcaklık tahmini)
])

# Modeli derleyin
model.compile(optimizer='adam', loss='mse')

# Erken durdurma callback'i ekleyin
early_stopping = EarlyStopping(monitor='val_loss', patience=25, restore_best_weights=True)

# Modeli eğitin
history = model.fit(X_train, y_train, epochs=150, batch_size=32, validation_data=(X_test, y_test), callbacks=[early_stopping])

# Eğitim ve doğrulama kaybı grafiği
plt.figure(figsize=(10, 5))
plt.plot(history.history['loss'], label='Eğitim Kaybı')
plt.plot(history.history['val_loss'], label='Doğrulama Kaybı')
plt.title('Model Kayıp Grafiği')
plt.xlabel('Epochs')
plt.ylabel('Kayıp (Loss)')
plt.legend()
plt.show()

# Test seti üzerinde tahmin yapın
y_pred = model.predict(X_test)

# scaler'ın hedef değişken için min ve max değerlerini sakla
temp_min = scaler.data_min_[0]
temp_max = scaler.data_max_[0]

# Tahmin edilen ve gerçek değerleri ölçekten çıkarın
y_test_rescaled = y_test * (temp_max - temp_min) + temp_min
y_pred_rescaled = y_pred * (temp_max - temp_min) + temp_min

# Gerçek ve tahmin edilen değerleri karşılaştırın
plt.figure(figsize=(10, 5))
plt.plot(y_test_rescaled, label='Gerçek Değerler')
plt.plot(y_pred_rescaled, label='Tahmin Edilen Değerler')
plt.title('Gerçek vs Tahmin Edilen Değerler')
plt.xlabel('Örnekler')
plt.ylabel('Sıcaklık')
plt.legend()
plt.show()

# Önümüzdeki 4 günün tahminini yapın
future_days = 4
future_dates = pd.date_range(start=df.index[-1], periods=future_days + 1)[1:]

# Son pencereyi alın
last_window = scaled_data[-window_size:].reshape(1, window_size, df.shape[1])

# Tahmin işlemi
predicted_values = []
for _ in range(future_days):
    prediction = model.predict(last_window)[0]
    predicted_values.append(prediction[0])  # Tahmin edilen değeri listeye ekleyin
    # last_window'u güncelleyin, prediction'ı df'nin sütun sayısına uyacak şekilde genişletin
    prediction_expanded = np.zeros((1, 1, df.shape[1]))
    prediction_expanded[0, 0, 0] = prediction  # Sadece ilk sütunu doldurun, diğerlerini 0 bırakın
    last_window = np.append(last_window[:, 1:, :], prediction_expanded, axis=1)

# Tahmin edilen sıcaklık değerlerini ölçekten çıkarın
predicted_values = np.array(predicted_values).reshape(-1, 1)
predicted_values = predicted_values * (temp_max - temp_min) + temp_min

# Tahmin edilen sıcaklık değerlerini ekrana yazdırın
for date, temp in zip(future_dates, predicted_values):
    print(f"{date.date()}: {temp[0]:.2f} °C")

# Tahminleri bir DataFrame'e çevirin
predicted_df = pd.DataFrame({
    'Date': future_dates,
    'Predicted Temperature (°C)': predicted_values.flatten()
})

# Plotly kullanarak tahmin edilen sıcaklık değerlerini tablo olarak gösterin
fig = go.Figure(data=[go.Table(
    header=dict(values=list(predicted_df.columns),
                fill_color='paleturquoise',
                align='left'),
    cells=dict(values=[predicted_df.Date.dt.strftime('%Y-%m-%d'), predicted_df['Predicted Temperature (°C)']],
               fill_color='lavender',
               align='left'))
])

fig.update_layout(title='Gelecek 4 Günün Sıcaklık Tahminleri')
fig.show()